I"F<p><em>해당 포스팅은 <a href="https://www.inflearn.com/course/iOS-Concurrency-GCD-Operation">iOS Concurrency(동시성) 프로그래밍, 동기 비동기 처리 그리고 GCD/Operation - 디스패치큐와 오퍼레이션큐의 이해</a> 강의를 수강하고 개인적으로 정리한 내용을 기록한 것 입니다.</em>
<br />
<br /></p>

<p>대기열(Queue)은 여러 종류와 갯수가 있으며 각 대기열의 특성이 다르다. 작업의 특성, 원하는 일처리에 따라 대기열의 특성에 맞게 작업을 보내야한다.</p>

<p>이번 포스팅에서는 이러한 대기열의 종류와 특성에 대해 기록하고자 한다.
<br />
<br /></p>

<h2 id="디스패치-큐의-종류">디스패치 큐의 종류</h2>
<hr />

<ul>
  <li>메인(main): 유일함(한 개), serial, 메인 스레드(DispatchQueue.main)</li>
  <li>글로벌(global): 종류 여러 개, concurrent(기본 설정), QoS(6종류)</li>
  <li>프라이빗(custom): 디폴트 생성은 serial, 변경 가능(concurrent로), 사용자화 디스패치 큐</li>
</ul>

<p>메인 스레드 예시)</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="o">.</span><span class="nf">now</span><span class="p">()</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// 메인 쓰레드로 보낼 작업</span>
<span class="p">}</span>
<span class="c1">// 지금으로부터(.now()) 2초 뒤에 해당 작업을 보낼 것이다.</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">// 의미상 아래 두 코드는 완전히 동일하다. </span>
<span class="c1">// 다만 첫번째 코드는 (현재 작업 중인 위치가 메인 스레드일 경우) 에러가 발생한다.</span>
<span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">sync</span> <span class="p">{</span> <span class="c1">// 1</span>
	<span class="nf">print</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">)</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">)</span> <span class="c1">// 2</span></code></pre></figure>

<p><br /></p>

<p>글로벌 큐 예시)</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">(</span><span class="nv">qos</span><span class="p">:</span> <span class="o">.</span><span class="n">userInteractive</span><span class="p">)</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p><br /></p>

<p>프라이빗 큐 예시)</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">queue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"com.sbk.serial"</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">queue2</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"com.sbk.concurrent"</span><span class="p">,</span> <span class="nv">attributes</span><span class="p">:</span> <span class="o">.</span><span class="n">concurrent</span><span class="p">)</span></code></pre></figure>

<p><br /></p>

<h2 id="qos-quality-of-service">QoS: Quality of Service</h2>
<hr />

<p>글로벌 큐의 서비스 품질을 의미한다. 총 5가지가 있으며(Unspecified는 거의 사용하지 않는다.) 번호가 낮을 수록 우선 순위가 높다.
<br /></p>

<ol>
  <li>UserInteractive [거의 즉시]: 유저와 직접적 인터렉티브(UI 업데이트, 애니메이션, UI 반응 등과 같은 사용자와 상호작용하는 작업)</li>
  <li>UserInitiated [몇 초]: 유저가 즉시 필요하긴 하지만, 비동기적으로 처리된 작업</li>
  <li>Default: 일반적인 작업</li>
  <li>Utility [몇 초에서 몇 분]: 보통 Progress Indicator와 함께 길게 실행되는 작업, 계산, IO, Networking, 지속적인 데이터 feeds</li>
  <li>Background [속도보다는 에너지 효율성 중시, 몇 분 이상]: 유저가 직접적으로 인지하지 않고 시간이 중요하지 않은 작업</li>
  <li>Unspecified: legacy API</li>
</ol>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown"><span class="gs">**다른 우선 순위의 글로벌 큐에 각각 작업이 보내졌을 때:**</span>
iOS가 알아서 우선적으로 중요한 작업을 인지하고 더 많은 스레드를 배치하고 배터리를 더 집중해서 사용하도록 한다.</code></pre></figure>

:ET