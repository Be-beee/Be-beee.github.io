I"mH<p>개인 토이 프로젝트에 깃허브 로그인을 사용할 일이 생겨, 처음으로(!) Login API 사용에 도전해 보았다. 네아로나 카카오 로그인을 먼저 쓰게 될 줄 알았는데 사람 일은 모르는 일이다. <br />
각설하고, 바로 시작해보자.
<br /></p>

<p>전체적인 방법은 깃허브에서 공식적으로 제공하는 <a href="https://docs.github.com/en/enterprise-server@2.21/developers/apps/authorizing-oauth-apps">문서</a>를 그대로 따라가면 되지만 처음이라 그런지 어려움이 좀 있었다. 다른 SNS 로그인 API도 크게 다르지 않을 것이라 생각하기에 이 곳에 전체 과정을 기록해두려 한다.
<br />
<br /></p>

<h2 id="1-깃허브에-애플리케이션-등록하기">1. 깃허브에 애플리케이션 등록하기</h2>
<hr />

<p>우선 내가 사용할 애플리케이션을 깃허브에 등록했다. [Settings] - [Developer settings] - [OAuth Apps]에서 [New OAuth App]을 클릭하여 새로운 앱을 생성해주었다.
<br />
<img src="/images/20201110_4/github_login_register.png" width="45%" />
<img src="/images/20201110_4/github_login_register_2.png" width="45%" />
<br />
<br />
Application name에는 애플리케이션 이름을, Homepage URL은 깃헙 저장소 주소를 넣어주었다. <br />
Authorization callback URL의 경우, <br />
애플리케이션 프로젝트의 [TARGETS] - [Info]의 [URL Types]를 추가해 아래 사진과 같이 간단히 callback url을 생성할 수 있다.
<br />
<img src="/images/20201110_4/github_login_callback_url.png" width="90%" />
<br />
<br />
<br /></p>

<p>앱을 등록하고 나면 아래의 사진과 같이 client ID와 client Secret을 확인할 수 있는 화면이 나타난다. client Secret은 처음에는 생성되어 있지 않으므로 [Generate a new client secret]으로 새로운 키값을 생성시켜주도록 한다.</p>

<p><img src="/images/20201110_4/registered_app_main.png" width="100%" />
<br />
<br />
<br />
<br />
<br /></p>

<h2 id="2-사용자-권한-요청하기">2. 사용자 권한 요청하기</h2>
<hr />

<p>모든 준비가 끝났다면, 이후로는 코딩의 영역이다. 간단히 로그인을 테스트하기 위해 화면에 로그인 버튼과 로그인이 되었는지 표시해주는 레이블만 앱 화면에 배치하였다.</p>

<div style="text-align: center;"><img src="/images/20201110_4/simple_appmain.png" width="70%" /></div>
<p><br />
<br />
<br /></p>

<p>로그인 버튼을 터치했을 때 사파리 (외부)앱으로 이동해 사용자의 권한을 요청해야 한다. 따라서 버튼의 IBAction 메서드를 다음과 같이 작성하였다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">loginGithub</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">clientID</span> <span class="o">=</span> <span class="kt">ClientLogin</span><span class="o">.</span><span class="n">client_id</span>
    <span class="k">let</span> <span class="nv">scope</span> <span class="o">=</span> <span class="kt">ClientLogin</span><span class="o">.</span><span class="n">scope</span> <span class="c1">// repo user</span>
    <span class="k">let</span> <span class="nv">urlString</span> <span class="o">=</span> <span class="kt">ClientLogin</span><span class="o">.</span><span class="n">reqAuthUrl</span> <span class="c1">// https://github.com/login/oauth/authorize</span>
    <span class="k">var</span> <span class="nv">components</span> <span class="o">=</span> <span class="kt">URLComponents</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">urlString</span><span class="p">)</span><span class="o">!</span>
    
    <span class="n">components</span><span class="o">.</span><span class="n">queryItems</span> <span class="o">=</span> <span class="p">[</span>
        <span class="kt">URLQueryItem</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"client_id"</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">clientID</span><span class="p">),</span>
        <span class="kt">URLQueryItem</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"scope"</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">scope</span><span class="p">)</span>
    <span class="p">]</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="n">components</span><span class="o">.</span><span class="n">url</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="c1">// UserInfoManager.delegate = self</span>
    <span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>client_id와 client_secret이 다른 곳에서도 사용되었기에 (예를 들어 SceneDelegate…) 아예 ClientLogin struct를 생성하여 그곳에 static 상수 값으로 정의해두었다.<br />
scope의 경우 프로그래머가 필요한 사용자 권한 범위를 나타내는 것인데 나의 경우 repo, user로 지정하였다.</p>

<p>해당 메서드를 작성하고 애플리케이션을 실행해보면 다음과 같이 사파리 앱으로 잘 넘어가는 것을 확인할 수 있다.(주석으로 처리해 둔 델리게이트 처리는 다음 단계에서 이어서 설명하겠다.)</p>

<div style="text-align: center;">
	<img src="/images/20201110_4/test1.png" width="30%" />
	<img src="/images/20201110_4/test2.png" width="30%" />
	<img src="/images/20201110_4/test3.png" width="30%" />
</div>

<p>사용자의 권한을 얻어 와서 다시 앱을 열면 깃허브는 code를 보내게 되는데, 이는 10분 후에 만료되므로 받아온 즉시 access token을 요청하도록 처리하였다. 이러한 code는 SceneDelegate 또는 AppDelegate에서 확인할 수 있다.</p>

<p>여기에선 SceneDelegate를 통해 받아온 code를 처리하였다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">scene</span><span class="p">(</span><span class="n">_</span> <span class="nv">scene</span><span class="p">:</span> <span class="kt">UIScene</span><span class="p">,</span> <span class="n">openURLContexts</span> <span class="kt">URLContexts</span><span class="p">:</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">UIOpenURLContext</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URLContexts</span><span class="o">.</span><span class="n">first</span><span class="p">?</span><span class="o">.</span><span class="n">url</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">code</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="n">absoluteString</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">"="</span><span class="p">)</span><span class="o">.</span><span class="n">last</span><span class="p">?</span><span class="o">.</span><span class="n">description</span> <span class="p">??</span> <span class="s">""</span>

        <span class="k">if</span> <span class="o">!</span><span class="n">code</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span>
            <span class="k">var</span> <span class="nv">component</span> <span class="o">=</span> <span class="kt">URLComponents</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="kt">ClientLogin</span><span class="o">.</span><span class="n">tokenReqUrl</span><span class="p">)</span>
            <span class="c1">// tokenReqUrl: https://github.com/login/oauth/access_token</span>
            <span class="k">let</span> <span class="nv">required</span> <span class="o">=</span> <span class="p">[</span>
                <span class="kt">URLQueryItem</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"client_id"</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">ClientLogin</span><span class="o">.</span><span class="n">client_id</span><span class="p">),</span>
                <span class="kt">URLQueryItem</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"client_secret"</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">ClientLogin</span><span class="o">.</span><span class="n">client_secret</span><span class="p">),</span>
                <span class="kt">URLQueryItem</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"code"</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">code</span><span class="p">)</span>
            <span class="p">]</span>
            <span class="n">component</span><span class="p">?</span><span class="o">.</span><span class="n">queryItems</span> <span class="o">=</span> <span class="kd">required</span>
            
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">tokenUrl</span> <span class="o">=</span> <span class="n">component</span><span class="p">?</span><span class="o">.</span><span class="n">url</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
            <span class="k">var</span> <span class="nv">request</span> <span class="o">=</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">tokenUrl</span><span class="p">)</span>
            <span class="n">request</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="s">"application/json"</span><span class="p">,</span> <span class="nv">forHTTPHeaderField</span><span class="p">:</span> <span class="s">"Accept"</span><span class="p">)</span>
            
            <span class="k">let</span> <span class="nv">session</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="p">(</span><span class="nv">configuration</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">dataTask</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="nf">dataTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">request</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
                <span class="k">let</span> <span class="nv">successRange</span> <span class="o">=</span> <span class="mi">200</span> <span class="o">..&lt;</span> <span class="mi">300</span>
                <span class="k">guard</span> <span class="n">error</span> <span class="o">==</span> <span class="kc">nil</span><span class="p">,</span> <span class="k">let</span> <span class="nv">statusCode</span> <span class="o">=</span> <span class="p">(</span><span class="n">response</span> <span class="k">as?</span> <span class="kt">HTTPURLResponse</span><span class="p">)?</span><span class="o">.</span><span class="n">statusCode</span><span class="p">,</span> <span class="n">successRange</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="n">statusCode</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span> <span class="c1">// 에러 없고, 네트워킹에 성공했는지</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">resultData</span> <span class="o">=</span> <span class="n">data</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">info</span> <span class="o">=</span> <span class="kt">UserInfoManager</span><span class="o">.</span><span class="nf">parseInfo</span><span class="p">(</span><span class="n">resultData</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                <span class="kt">UserInfoManager</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">info</span> <span class="c1">// 받아온 token 값을 저장</span>
                <span class="kt">UserInfoManager</span><span class="o">.</span><span class="nf">loginSuccessed</span><span class="p">()</span> <span class="c1">// 로그인 성공</span>
            <span class="p">}</span>
            
            <span class="n">dataTask</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
            
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><br /></p>

<p>URLSession을 통해 받아온 token 값을 저장한 후 <code class="language-plaintext highlighter-rouge">loginSuccessed()</code> 함수를 실행하여 로그인 성공 후 애플리케이션에 변화를 주었다.</p>

<p>원래는 token 값을 이용해 다시 사용자 정보를 가져와야 하지만 URLSession을 사용하는 방식 자체는 같으므로 우선 생략하였다.
<br />
<br />
<br /></p>

<h2 id="3-애플리케이션-화면-변화-보여주기">3. 애플리케이션 화면 변화 보여주기</h2>
<hr />
<p>로그인이 되었다면 사용자에게 어떤 퍼포먼스를 보여줘야 한다. 화면이 이동된다거나, 사용자 이름을 화면에 표시하여 로그인이 성공적으로 끝났음을 표시해주어야하는 것이다.</p>

<p>여담으로 이번 단계가 이 포스트를 작성하게 된 궁극적인 원인이라 할 수 있겠다.</p>

<p>애플리케이션 화면에 배치해두었던 레이블에 ‘로그인 성공’이라는 문자열을 띄우기 위해 token이 저장된 <code class="language-plaintext highlighter-rouge">UserInfoManager</code>와 <code class="language-plaintext highlighter-rouge">ViewController</code>를 연결하고, 데이터를 주고 받을 필요가 있었다.<br />
따라서, <code class="language-plaintext highlighter-rouge">LoginDelegate</code> protocol을 작성하여 연결 매개체를 만들었다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">protocol</span> <span class="kt">LoginDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">loginSucceessed</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">UserInfoManager</code>에 <code class="language-plaintext highlighter-rouge">LoginDelegate</code> 타입의 delegate 변수를 생성함으로써 <code class="language-plaintext highlighter-rouge">LoginDelegate</code> 함수를 사용할 수 있도록 했다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">UserInfoManager</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">delegate</span><span class="p">:</span> <span class="kt">LoginDelegate</span><span class="p">?</span>
    <span class="c1">// 생략</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">loginSuccessed</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">delegate</span><span class="p">?</span><span class="o">.</span><span class="nf">loginSucceessed</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Login Successed"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><br />
<br /></p>

<p>한편 ViewController는 LoginDelegate를 상속함으로써 작성해야하는 <code class="language-plaintext highlighter-rouge">loginSuccessed()</code> 함수를 통해 애플리케이션 화면의 레이블을 변경하였다. <br />
URLSession 내부에서 실행되고 있으므로 레이블을 변경하는 작업을 메인 스레드로 보내주어야 한다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">LoginDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">loginSucceessed</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">userId</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Login Successed"</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>실행해보면 다음과 같이 잘 작동하는 것을 확인할 수 있다! 만세!💃</p>
<div style="text-align: center;">
	<img src="/images/20201110_4/success.png" width="50%" />
</div>

:ET